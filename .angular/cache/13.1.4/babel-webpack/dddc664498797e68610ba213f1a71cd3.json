{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { ServiceConstants } from '../constants/ServiceConstants';\nimport { ENV_CONFIG } from 'src/environments/environment-config.interface';\nimport { DeviceConstants } from '../constants/DeviceConstants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DumperService = /*#__PURE__*/(() => {\n  class DumperService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n      this.dumperDetailsUrl = '/dumperdetailscount';\n      this.tripDurationUrl = '/durationofthetrip';\n      this.dumperIdsUrl = '/device-view';\n      this.dumperStatusUrl = '/dumperLiveLocation';\n      this.tripDetailsUrl = '';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        })\n      };\n      this.apiBaseUrl = `${config.environment.apiUrl}`;\n    }\n\n    getDumperDetails(dumperModel) {\n      return this.http.post(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.dumperDetailsUrl, dumperModel, this.httpOptions);\n    }\n\n    getTripDuration(dumperModel) {\n      return this.http.post(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.tripDurationUrl, dumperModel, this.httpOptions);\n    }\n\n    getDeviceIds(category = DeviceConstants.dumper) {\n      return this.http.post(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.dumperIdsUrl + `?deviceCatagory=${category}`, {});\n    } // To get the devices\n\n\n    getDevices(dumper) {\n      return this.http.post(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.dumperStatusUrl, dumper);\n    }\n\n    getDumperStatus(dumperId) {\n      return this.http.post(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.dumperStatusUrl, dumperId);\n    }\n\n    getTripDetails() {\n      return this.http.get(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.tripDetailsUrl);\n    }\n\n  }\n\n  DumperService.ɵfac = function DumperService_Factory(t) {\n    return new (t || DumperService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENV_CONFIG));\n  };\n\n  DumperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DumperService,\n    factory: DumperService.ɵfac,\n    providedIn: 'root'\n  });\n  return DumperService;\n})();","map":null,"metadata":{},"sourceType":"module"}