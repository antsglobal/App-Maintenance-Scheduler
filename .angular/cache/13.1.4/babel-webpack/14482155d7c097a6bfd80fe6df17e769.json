{"ast":null,"code":"export class DashboardHelper {\n  /**\r\n   * formats the API response and prepare the object with completed\r\n   * trips in the selected Date range\r\n   *\r\n   * @param data The Raw API response object\r\n   * @returns  widgetData\r\n   */\n  widgetCount(data, dateRange = [new Date()], devicesCount) {\n    let widgetData = {\n      dumperUtilization: {\n        active: 0,\n        percentage: 0,\n        total: devicesCount.dumpers\n      },\n      shovelUtilization: {\n        active: 0,\n        percentage: 0,\n        total: devicesCount.loadingPoints\n      },\n      totalTripCount: {\n        trips: 0\n      },\n      tripAnalysis: []\n    };\n\n    if (data) {\n      data.map(item => {\n        widgetData.dumperUtilization.active = widgetData.dumperUtilization.active + item.DumperCount;\n        widgetData.shovelUtilization.active = widgetData.shovelUtilization.active + item.ShovelCount;\n        widgetData.totalTripCount.trips = widgetData.totalTripCount.trips + item.TripCount;\n        widgetData.tripAnalysis.push({\n          date: item.Date,\n          trips: item.TripCount\n        });\n      });\n      widgetData.dumperUtilization.active = Math.ceil(widgetData.dumperUtilization.active / dateRange.length);\n      widgetData.dumperUtilization.percentage = this.calcPercentage(widgetData.dumperUtilization.active, widgetData.dumperUtilization.total);\n      widgetData.shovelUtilization.active = Math.ceil(widgetData.shovelUtilization.active / dateRange.length);\n      widgetData.shovelUtilization.percentage = this.calcPercentage(widgetData.shovelUtilization.active, widgetData.shovelUtilization.total);\n    }\n\n    return widgetData;\n  }\n\n  calcPercentage(actual = 0, total = 100, decimals = 0) {\n    let percentage = actual / total * 100;\n\n    if (decimals == 0) {\n      return Math.round(percentage);\n    } else if (decimals > 0) {\n      return percentage.toFixed(decimals);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}