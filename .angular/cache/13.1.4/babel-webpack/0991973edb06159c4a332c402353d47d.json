{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// @Component({\n//   selector: 'app-side-menu-items',\n//   templateUrl: './side-menu-items.component.html',\n//   styleUrls: ['./side-menu-items.component.css']\n// })\n// export class SideMenuItemsComponent implements OnInit {\n//   constructor() { }\n//   ngOnInit(): void {\n//   }\n// }\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n\nfunction SideMenuItemsComponent_mat_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 4);\n    i0.ɵɵelement(1, \"button\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" 1. \", node_r3.item, \" \");\n  }\n}\n\nfunction SideMenuItemsComponent_mat_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 4);\n    i0.ɵɵelementStart(1, \"a\", 6);\n    i0.ɵɵlistener(\"click\", function SideMenuItemsComponent_mat_tree_node_2_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const node_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.loadChildren(node_r4);\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r4.item);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.isExpanded(node_r4) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" 2. \", node_r4.item, \" \");\n  }\n}\n\nfunction SideMenuItemsComponent_mat_tree_node_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\");\n    i0.ɵɵelementStart(1, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function SideMenuItemsComponent_mat_tree_node_3_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const node_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.loadMore(node_r7.loadMoreParentItem);\n    });\n    i0.ɵɵtext(2, \" Load more... \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst LOAD_MORE = 'LOAD_MORE';\n/** Nested node */\n\nexport class LoadmoreNode {\n  constructor(item, hasChildren = false, loadMoreParentItem = null) {\n    this.item = item;\n    this.hasChildren = hasChildren;\n    this.loadMoreParentItem = loadMoreParentItem;\n    this.childrenChange = new BehaviorSubject([]);\n  }\n\n  get children() {\n    return this.childrenChange.value;\n  }\n\n}\n/** Flat node with expandable and level information */\n\nexport class LoadmoreFlatNode {\n  constructor(item, level = 1, expandable = false, loadMoreParentItem = null) {\n    this.item = item;\n    this.level = level;\n    this.expandable = expandable;\n    this.loadMoreParentItem = loadMoreParentItem;\n  }\n\n}\n/**\r\n * A database that only load part of the data initially. After user clicks on the `Load more`\r\n * button, more data will be loaded.\r\n */\n\nexport let LoadmoreDatabase = /*#__PURE__*/(() => {\n  class LoadmoreDatabase {\n    constructor() {\n      this.batchNumber = 5;\n      this.dataChange = new BehaviorSubject([]);\n      this.nodeMap = new Map();\n      /** The data */\n\n      this.rootLevelNodes = ['Vegetables', 'Fruits'];\n      this.dataMap = new Map([['Fruits', ['Apple', 'Orange', 'Banana']], ['Vegetables', ['Tomato', 'Potato', 'Onion']], ['Apple', ['Fuji', 'Macintosh']], ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']]]);\n    }\n\n    initialize() {\n      const data = this.rootLevelNodes.map(name => this._generateNode(name));\n      this.dataChange.next(data);\n    }\n    /** Expand a node whose children are not loaded */\n\n\n    loadMore(item, onlyFirstTime = false) {\n      if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n        return;\n      }\n\n      const parent = this.nodeMap.get(item);\n      const children = this.dataMap.get(item);\n\n      if (onlyFirstTime && parent.children.length > 0) {\n        return;\n      }\n\n      const newChildrenNumber = parent.children.length + this.batchNumber;\n      const nodes = children.slice(0, newChildrenNumber).map(name => this._generateNode(name));\n\n      if (newChildrenNumber < children.length) {\n        // Need a new load more node\n        nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n      }\n\n      parent.childrenChange.next(nodes);\n      this.dataChange.next(this.dataChange.value);\n    }\n\n    _generateNode(item) {\n      if (this.nodeMap.has(item)) {\n        return this.nodeMap.get(item);\n      }\n\n      const result = new LoadmoreNode(item, this.dataMap.has(item));\n      this.nodeMap.set(item, result);\n      return result;\n    }\n\n  }\n\n  LoadmoreDatabase.ɵfac = function LoadmoreDatabase_Factory(t) {\n    return new (t || LoadmoreDatabase)();\n  };\n\n  LoadmoreDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadmoreDatabase,\n    factory: LoadmoreDatabase.ɵfac\n  });\n  return LoadmoreDatabase;\n})();\nexport let SideMenuItemsComponent = /*#__PURE__*/(() => {\n  class SideMenuItemsComponent {\n    constructor(_database) {\n      this._database = _database;\n      this.nodeMap = new Map();\n\n      this.getChildren = node => node.childrenChange;\n\n      this.transformer = (node, level) => {\n        const existingNode = this.nodeMap.get(node.item);\n\n        if (existingNode) {\n          return existingNode;\n        }\n\n        const newNode = new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n        this.nodeMap.set(node.item, newNode);\n        return newNode;\n      };\n\n      this.getLevel = node => node.level;\n\n      this.isExpandable = node => node.expandable;\n\n      this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n      this.isLoadMore = (_, _nodeData) => _nodeData.item === LOAD_MORE;\n\n      this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n      this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n      this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n      _database.dataChange.subscribe(data => {\n        this.dataSource.data = data;\n      });\n\n      _database.initialize();\n    }\n    /** Load more nodes from data source */\n\n\n    loadMore(item) {\n      this._database.loadMore(item);\n    }\n\n    loadChildren(node) {\n      this._database.loadMore(node.item, true);\n    }\n\n  }\n\n  SideMenuItemsComponent.ɵfac = function SideMenuItemsComponent_Factory(t) {\n    return new (t || SideMenuItemsComponent)(i0.ɵɵdirectiveInject(LoadmoreDatabase));\n  };\n\n  SideMenuItemsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SideMenuItemsComponent,\n    selectors: [[\"app-side-menu-items\"]],\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\", 3, \"click\"], [1, \"mat-icon-rtl-mirror\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function SideMenuItemsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree\", 0);\n        i0.ɵɵtemplate(1, SideMenuItemsComponent_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n        i0.ɵɵtemplate(2, SideMenuItemsComponent_mat_tree_node_2_Template, 5, 3, \"mat-tree-node\", 2);\n        i0.ɵɵtemplate(3, SideMenuItemsComponent_mat_tree_node_3_Template, 3, 0, \"mat-tree-node\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.isLoadMore);\n      }\n    },\n    styles: [\"\"]\n  });\n  return SideMenuItemsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}