{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { ServiceConstants } from '../constants/ServiceConstants';\nimport { map } from 'rxjs/operators';\nimport { ENV_CONFIG } from 'src/environments/environment-config.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../models/assettracking\";\nexport let AssettRackingService = /*#__PURE__*/(() => {\n  class AssettRackingService {\n    constructor(http, config, assetAdapter, assetCountAdapter) {\n      this.http = http;\n      this.config = config;\n      this.assetAdapter = assetAdapter;\n      this.assetCountAdapter = assetCountAdapter;\n      this.assetTrackingApiUrl = ServiceConstants.baseurlv1 + '/getassets';\n      this.assetLocationsApiUrl = ServiceConstants.baseurlv1 + '/getlocations';\n      this.assetTrackingDetailsApiUrl = ServiceConstants.baseurlv1 + '/assettrackingforui';\n      this.assetCountByLocationApiUrl = ServiceConstants.baseurlv1 + '/getdevicecount';\n      this.getAssetsApiUrl = '/assetview';\n      this.assetDetails = '../appdata/asset-details.json';\n      this.locationMappingListAPIUrl = ServiceConstants.baseurlv1 + '/assetlocationsview';\n      this.locationMappingAddingListAPIUrl = ServiceConstants.baseurlv1 + '/assetlocationsadding';\n      this.addAssetsAPIUrl = ServiceConstants.baseurlv1 + '/assetadding';\n      this.testApiBaseUrl = ServiceConstants.baseurlt1;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        })\n      };\n      this.apiBaseUrl = `${config.environment.apiUrl}`;\n    }\n\n    getAssetDetails() {\n      this.assetTrackingApiUrl = this.assetDetails;\n      return this.http.get(this.apiBaseUrl + this.assetTrackingApiUrl).pipe(map(response => {\n        return response.map(item => {\n          return this.assetAdapter.adapt(item);\n        });\n      }));\n    }\n\n    getAssetMasters(assetmodel) {\n      return this.http.get(this.apiBaseUrl + ServiceConstants.baseurlv1 + this.getAssetsApiUrl);\n    }\n\n    getlocationAssetDetails(id = 0) {\n      this.assetTrackingApiUrl = this.apiBaseUrl + ServiceConstants.baseurlv1 + '/getassets';\n      ;\n      return this.http.post(this.assetTrackingApiUrl, {\n        locationId: id\n      }).pipe(map(response => {\n        return response.map(item => {\n          return this.assetAdapter.adapt(item);\n        });\n      }));\n    }\n\n    getAssetCountByLocation() {\n      return this.http.get(this.apiBaseUrl + this.assetCountByLocationApiUrl).pipe(map(response => {\n        return response.map(item => {\n          return this.assetCountAdapter.adapt(item);\n        });\n      }));\n    }\n\n    getAssetLocations() {\n      return this.http.get(this.apiBaseUrl + this.assetLocationsApiUrl);\n    } // To get the details of the assets with the recent location.\n\n\n    getAssetTrackingDetails() {\n      return this.http.get(this.apiBaseUrl + this.assetTrackingDetailsApiUrl);\n    }\n\n    getLocationsImages() {\n      let assetImagesUrl = 'appdata/asset-location.json';\n      return this.http.get(assetImagesUrl);\n    }\n\n    getLocationMappingList() {\n      return this.http.get(this.apiBaseUrl + this.locationMappingListAPIUrl);\n    }\n\n    addLocationMapping(data) {\n      return this.http.post(this.apiBaseUrl + this.locationMappingAddingListAPIUrl, data);\n    }\n\n    addAssets(data) {\n      return this.http.post(this.apiBaseUrl + this.addAssetsAPIUrl, data);\n    }\n\n    deleteAssets(data) {\n      data['status'] = \"0\";\n      return this.http.post(this.apiBaseUrl + this.addAssetsAPIUrl, data);\n    }\n\n  }\n\n  AssettRackingService.ɵfac = function AssettRackingService_Factory(t) {\n    return new (t || AssettRackingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENV_CONFIG), i0.ɵɵinject(i2.AssetTrackingAdapter), i0.ɵɵinject(i2.AssetLocationAdapter));\n  };\n\n  AssettRackingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssettRackingService,\n    factory: AssettRackingService.ɵfac,\n    providedIn: 'root'\n  });\n  return AssettRackingService;\n})();","map":null,"metadata":{},"sourceType":"module"}