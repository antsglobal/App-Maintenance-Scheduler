{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/mqtt-service.service\";\n\nfunction MqttPulisherComponent_mat_header_cell_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1, \" Device Id\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MqttPulisherComponent_mat_cell_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r9.deviceId, \" \");\n  }\n}\n\nfunction MqttPulisherComponent_mat_header_cell_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1, \" Device Topic \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MqttPulisherComponent_mat_cell_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r10.deviceTopic, \" \");\n  }\n}\n\nfunction MqttPulisherComponent_mat_header_cell_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1, \" Status \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MqttPulisherComponent_mat_cell_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵelementStart(1, \"mat-slide-toggle\", 15);\n    i0.ɵɵlistener(\"change\", function MqttPulisherComponent_mat_cell_19_Template_mat_slide_toggle_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const element_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.updateDeviceInfo(element_r11);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r11 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r6.getDeviceStatus(element_r11.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r11.status, \" \");\n  }\n}\n\nfunction MqttPulisherComponent_mat_header_row_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-header-row\");\n  }\n}\n\nfunction MqttPulisherComponent_mat_row_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-row\");\n  }\n}\n\nexport let MqttPulisherComponent = /*#__PURE__*/(() => {\n  class MqttPulisherComponent {\n    constructor(mqttService) {\n      this.mqttService = mqttService;\n      this.devices = [{\n        \"deviceId\": \"MQTTACDEV1\",\n        \"deviceTopic\": \"devices/ac/dev1\",\n        \"status\": \"ON\"\n      }, {\n        \"deviceId\": \"MQTTACDEV2\",\n        \"deviceTopic\": \"devices/ac/dev2\",\n        \"status\": \"OFF\"\n      }, {\n        \"deviceId\": \"MQTTACDEV3\",\n        \"deviceTopic\": \"devices/ac/dev3\",\n        \"status\": \"ON\"\n      }];\n      this.displayedColumns = ['deviceId', 'deviceTopic', 'status'];\n      this.deviceData = new MatTableDataSource(this.devices);\n    }\n\n    ngOnInit() {\n      this.deviceData.data = this.devices;\n    }\n\n    getDeviceStatus(status) {\n      let stat = status == \"ON\" ? true : false;\n      return stat;\n    }\n\n    updateDeviceInfo(element) {\n      element.status = element.status == \"ON\" ? \"OFF\" : \"ON\";\n      this.publish(element);\n    }\n\n    publish(element) {\n      console.log(element);\n      this.mqttService.pusblisher(element).subscribe(data => {});\n    }\n\n  }\n\n  MqttPulisherComponent.ɵfac = function MqttPulisherComponent_Factory(t) {\n    return new (t || MqttPulisherComponent)(i0.ɵɵdirectiveInject(i1.MqttServiceService));\n  };\n\n  MqttPulisherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MqttPulisherComponent,\n    selectors: [[\"app-mqtt-pulisher\"]],\n    decls: 23,\n    vars: 3,\n    consts: [[1, \"mat-card-page\"], [1, \"mat-card-header-page\"], [1, \"mat-card-title-page\"], [1, \"mat-card-content-page\", \"p-2\"], [1, \"row\"], [1, \"col-12\"], [3, \"dataSource\"], [\"table\", \"\"], [\"matColumnDef\", \"deviceId\"], [4, \"matHeaderCellDef\"], [4, \"matCellDef\"], [\"matColumnDef\", \"deviceTopic\"], [\"matColumnDef\", \"status\"], [4, \"matHeaderRowDef\"], [4, \"matRowDef\", \"matRowDefColumns\"], [\"name\", \"element.deviceId\", 1, \"m-2\", 3, \"checked\", \"change\"]],\n    template: function MqttPulisherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"mat-card-header\", 1);\n        i0.ɵɵelementStart(2, \"mat-card-title\", 2);\n        i0.ɵɵelementStart(3, \"mat-icon\");\n        i0.ɵɵtext(4, \"dns\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \" MQTT Publisher \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-card-content\", 3);\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"mat-table\", 6, 7);\n        i0.ɵɵelementContainerStart(11, 8);\n        i0.ɵɵtemplate(12, MqttPulisherComponent_mat_header_cell_12_Template, 2, 0, \"mat-header-cell\", 9);\n        i0.ɵɵtemplate(13, MqttPulisherComponent_mat_cell_13_Template, 2, 1, \"mat-cell\", 10);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(14, 11);\n        i0.ɵɵtemplate(15, MqttPulisherComponent_mat_header_cell_15_Template, 2, 0, \"mat-header-cell\", 9);\n        i0.ɵɵtemplate(16, MqttPulisherComponent_mat_cell_16_Template, 2, 1, \"mat-cell\", 10);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(17, 12);\n        i0.ɵɵtemplate(18, MqttPulisherComponent_mat_header_cell_18_Template, 2, 0, \"mat-header-cell\", 9);\n        i0.ɵɵtemplate(19, MqttPulisherComponent_mat_cell_19_Template, 3, 2, \"mat-cell\", 10);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(20, MqttPulisherComponent_mat_header_row_20_Template, 1, 0, \"mat-header-row\", 13);\n        i0.ɵɵtemplate(21, MqttPulisherComponent_mat_row_21_Template, 1, 0, \"mat-row\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"mat-card-footer\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"dataSource\", ctx.deviceData);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    styles: [\"\"]\n  });\n  return MqttPulisherComponent;\n})();\nexport class DeviceModel {}","map":null,"metadata":{},"sourceType":"module"}